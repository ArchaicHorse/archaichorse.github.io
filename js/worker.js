let readyFrames = [];
let underflow = true;
let handleCount = 0;
let renderCount = 0;
let frameTime = 50; // in milliseconds
let width = 144;
let height = 82;

function handleFrame(frame) {
    console.log('handling frame ' + handleCount);
    handleCount++;
    readyFrames.push(frame);
    if (underflow)
        setTimeout(renderFrame, 0);
}

function handleSingleFrame(frame) {
    if (handleCount == 0) {
        console.log('handleSingleFrame: ' + handleCount);
        handleCount++;

        readyFrames.push(frame);
        if (underflow)
            setTimeout(renderFrame, 0);
    } else {
        console.log('handleSingleFrame: skipping')
    }
}

function delay(time_ms) {
    return new Promise((resolve) => {
        setTimeout(resolve, time_ms);
    });
}

async function renderFrame() {
    if (readyFrames.length == 0) {
        console.log('renderFrame: no frames to render');
        underflow = true;
        return;
    }
    console.log('renderFrame: rendering frame ' + renderCount);
    renderCount++;

    let frame = readyFrames.shift();
    underflow = false;

    
    if (frame.planes === null) {
        console.log('planes null');
    } else {
        console.log("planes fly! " + frame.planes);
    }

    let bitmap = await frame.createImageBitmap();
    console.log('created bitmap');

    await delay(frameTime);

    console.log('new offscreen canvas');
    let cnv = new OffscreenCanvas(width, height);
    let ctx = cnv.getContext('2d', { alpha: false });
    console.log('drawing image');
    ctx.drawImage(bitmap, 0, 0);
    console.log('posting bitmap');
    self.postMessage(bitmap);
    console.log('another one!');
    // Immediately schedule rendering of the next frame
    setTimeout(renderFrame, 0);
    frame.close();
}

async function decodeVideo(buffer, avcC, single=false) {
    
    const init = {
        output : handleFrame,
        error: (e) => {
            console.log(e.message);
        }
    };

    // il only outputs one frame
    if (single) {
        init.output = handleSingleFrame;
    }

    const config = {
        codec: "avc1.64000a",
        description : avcC, 
        codedWidth: width,
        codedHeight: height,
    };

    let decoder = new VideoDecoder(init);
    decoder.configure(config);

    console.log('creating encoded video chunk');

    let chunk = new EncodedVideoChunk({
        type : "key",
        timestamp: frameTime,
        data : buffer,
    });

    handleCount = 0;
    renderCount = 0;

    decoder.decode(chunk);
    
    await decoder.flush();
    await decoder.close();
    
}

function playVideo(selectedValue) {
    if (selectedValue == 0) {
        // of_avcc_vcl.264
        let avcC = new Uint8Array([ 
            0x01, 0x64, 0x00, 0x0B, 0xFF, 0xE1, 0x00, 0x18, 0x67, 0x64, 
            0x00, 0x0B, 0xAC, 0xD9, 0x42, 0x4D, 0xF8, 0x88, 0x40, 0x00, 
            0x00, 0x03, 0x00, 0x40, 0x00, 0x00, 0x0F, 0x03, 0xC5, 0x0A, 
            0x65, 0x80, 0x01, 0x00, 0x05, 0x68, 0xEB, 0xEC, 0xB2, 0x2C
        ]);
        let data = new Uint8Array([
            0x00, 0x00, 0x00, 0x9C, 0x65, 0x88, 0x84, 0x00, 0x19, 0x7F, 0x27, 0xC1, 0xEA, 0x59, 0x40, 
            0x04, 0xB2, 0x70, 0xEA, 0xBD, 0xAB, 0x16, 0x33, 0x0D, 0xD0, 0x25, 0x95, 0x02, 0xCF, 0xAD, 
            0x11, 0xB6, 0xF1, 0xB5, 0xAD, 0x9C, 0x09, 0xDC, 0x13, 0x97, 0xD2, 0x4F, 0x77, 0xF8, 0x9B, 
            0xE1, 0x9D, 0xE8, 0x9A, 0x9B, 0xA1, 0xB1, 0xB6, 0x90, 0xE7, 0x32, 0x63, 0xBF, 0x8C, 0xF4, 
            0xFC, 0xE0, 0x2D, 0x61, 0x89, 0x77, 0xA4, 0xC0, 0xE0, 0x04, 0xA9, 0x96, 0x11, 0x3F, 0xD8, 
            0x2D, 0x49, 0xFF, 0xB0, 0xE2, 0xE3, 0xCC, 0xB5, 0xE5, 0x34, 0x8F, 0xAA, 0xFE, 0x47, 0x24, 
            0x7F, 0x05, 0xAE, 0xC9, 0x10, 0x8B, 0x26, 0xEC, 0x17, 0x29, 0xBE, 0x38, 0x95, 0x95, 0x68, 
            0x57, 0xF7, 0xD8, 0x5F, 0x10, 0xAC, 0x03, 0xA3, 0x7D, 0x6A, 0x2F, 0xE6, 0x2E, 0x49, 0x49, 
            0x1E, 0x00, 0xD2, 0xDF, 0x26, 0x6C, 0xB1, 0x50, 0xD3, 0x26, 0xB9, 0xBC, 0x1F, 0xAC, 0x7E, 
            0x3D, 0xE2, 0x27, 0x77, 0xA9, 0x40, 0xF4, 0xD2, 0x3E, 0xC9, 0x06, 0xB9, 0xD7, 0x50, 0xE2, 
            0xA3, 0x4E, 0x43, 0xAB, 0xCE, 0xAB, 0xF2, 0xC9, 0x57, 0xA9, 0x00, 0x00, 0x00, 0x0E, 0x41, 
            0x9A, 0x21, 0x6C, 0x41, 0x97, 0xC3, 0xC0, 0xBA, 0xC0, 0xD4, 0xB7, 0xD4, 0xD8, 0x00, 0x00, 
            0x00, 0x10, 0x41, 0x9A, 0x42, 0x3C, 0x21, 0x93, 0x29, 0x84, 0x19, 0x7F, 0x77, 0x69, 0x85, 
            0x85, 0xFA, 0x57, 0x00, 0x00, 0x00, 0x11, 0x41, 0x9A, 0x66, 0x49, 0xE1, 0x0F, 0x26, 0x53, 
            0x02, 0x0C, 0xBF, 0xC3, 0x79, 0x91, 0x8E, 0xB2, 0x2D, 0x00, 0x00, 0x00, 0x0A, 0x41, 0x9E, 
            0x84, 0x45, 0x11, 0x3C, 0x19, 0x7F, 0x3E, 0x61, 0x00, 0x00, 0x00, 0x08, 0x01, 0x9E, 0xA3, 
            0x74, 0x41, 0x97, 0x3E, 0x61, 0x00, 0x00, 0x00, 0x08, 0x01, 0x9E, 0xA5, 0x6A, 0x41, 0x97, 
            0x3E, 0x61, 0x00, 0x00, 0x00, 0x15, 0x41, 0x9A, 0xA7, 0x49, 0xA8, 0x41, 0x68, 0x99, 0x4C, 
            0x08, 0x32, 0xFF, 0x57, 0x64, 0xEE, 0xB3, 0xBD, 0xFA, 0x4B, 0x98, 0xD1, 0x00, 0x00, 0x00, 
            0x11, 0x41, 0x9A, 0xC9, 0x49, 0xE1, 0x0A, 0x52, 0x65, 0x30, 0x51, 0x12, 0xC1, 0x97, 0x7F, 
            0xED, 0xA2, 0x9B, 0x00, 0x00, 0x00, 0x08, 0x01, 0x9E, 0xE8, 0x6A, 0x41, 0x97, 0x3E, 0x60, 
            0x00, 0x00, 0x00, 0x10, 0x41, 0x9A, 0xED, 0x49, 0xE1, 0x0E, 0x89, 0x94, 0xC0, 0x83, 0x2F, 
            0xB0, 0xB8, 0xC8, 0xA1, 0x63, 0x00, 0x00, 0x00, 0x0A, 0x41, 0x9F, 0x0B, 0x45, 0x15, 0x3C, 
            0x19, 0x7F, 0x3E, 0x60, 0x00, 0x00, 0x00, 0x08, 0x01, 0x9F, 0x2A, 0x74, 0x41, 0x97, 0x3E, 
            0x60, 0x00, 0x00, 0x00, 0x08, 0x01, 0x9F, 0x2C, 0x6A, 0x41, 0x97, 0x3E, 0x61, 0x00, 0x00, 
            0x00, 0x15, 0x41, 0x9B, 0x31, 0x49, 0xA8, 0x41, 0x68, 0x99, 0x4C, 0x08, 0x30, 0xFF, 0xBC, 
            0xEE, 0x68, 0x6A, 0x9A, 0x77, 0x80, 0x86, 0x3D, 0x00, 0x00, 0x00, 0x0B, 0x41, 0x9F, 0x4F, 
            0x45, 0x11, 0x2C, 0x19, 0x7F, 0xDA, 0x10, 0xF1, 0x00, 0x00, 0x00, 0x08, 0x01, 0x9F, 0x6E, 
            0x74, 0x41, 0x97, 0x3E, 0x60, 0x00, 0x00, 0x00, 0x08, 0x01, 0x9F, 0x70, 0x6A, 0x41, 0x97, 
            0x3E, 0x60, 0x00, 0x00, 0x00, 0x40, 0x41, 0x9B, 0x72, 0x49, 0xA8, 0x41, 0x6C, 0x99, 0x4C, 
            0x08, 0x2C, 0xFF, 0x5A, 0x9F, 0x4B, 0xAF, 0xCE, 0xA2, 0x7C, 0x91, 0x65, 0xD9, 0xC8, 0x88, 
            0x4B, 0x57, 0xD2, 0x26, 0x7F, 0x2A, 0x9B, 0xE4, 0xF2, 0x26, 0x94, 0x73, 0x7A, 0xEA, 0xBB, 
            0x2A, 0x19, 0x89, 0xCA, 0x32, 0x2F, 0x41, 0x12, 0x9C, 0xD4, 0xF5, 0x30, 0xEA, 0x93, 0x03, 
            0x82, 0xB2, 0x78, 0x8E, 0x7B, 0x86, 0x06, 0xDC, 0x50, 0xF9, 0x00, 0x00, 0x00, 0x1B, 0x41, 
            0x9B, 0x94, 0x49, 0xE1, 0x0A, 0x52, 0x65, 0x30, 0x51, 0x52, 0xC1, 0x67, 0x5D, 0x63, 0x73, 
            0x3D, 0x53, 0x82, 0x68, 0xD0, 0x42, 0x40, 0x28, 0x61, 0xB3, 0x33, 0x00, 0x00, 0x00, 0x0A, 
            0x01, 0x9F, 0xB3, 0x6A, 0x41, 0x97, 0x98, 0x96, 0xAA, 0xB8, 0x00, 0x00, 0x00, 0x13, 0x41, 
            0x9B, 0xB5, 0x49, 0xE1, 0x0E, 0x89, 0x94, 0xC0, 0x82, 0xCF, 0x55, 0xA0, 0x45, 0xA9, 0x41, 
            0x36, 0x8C, 0x97, 0x00, 0x00, 0x00, 0x0D, 0x41, 0x9B, 0xD6, 0x49, 0xE1, 0x0F, 0x26, 0x53, 
            0x02, 0x0B, 0x3F, 0x25, 0xE0, 0x00, 0x00, 0x00, 0x0D, 0x41, 0x9B, 0xF7, 0x49, 0xE1, 0x0F, 
            0x26, 0x53, 0x02, 0x0B, 0x3F, 0x25, 0xE1, 0x00, 0x00, 0x00, 0x18, 0x41, 0x9A, 0x18, 0x49, 
            0xE1, 0x0F, 0x26, 0x53, 0x02, 0x0A, 0xBF, 0x9D, 0x4D, 0xDB, 0xCA, 0x74, 0x72, 0x85, 0x86, 
            0x3C, 0xBD, 0x21, 0xCF, 0xB3, 0x00, 0x00, 0x00, 0x0F, 0x41, 0x9A, 0x3A, 0x49, 0xE1, 0x0F, 
            0x26, 0x53, 0x05, 0x11, 0x3C, 0x16, 0x7F, 0x25, 0xE0, 0x00, 0x00, 0x00, 0x08, 0x01, 0x9E, 
            0x59, 0x6A, 0x41, 0x97, 0x3E, 0x61, 0x00, 0x00, 0x00, 0x0D, 0x41, 0x9A, 0x5B, 0x49, 0xE1, 
            0x0F, 0x26, 0x53, 0x02, 0x0B, 0x3F, 0x25, 0xE0, 0x00, 0x00, 0x00, 0x0D, 0x41, 0x9A, 0x7C, 
            0x49, 0xE1, 0x0F, 0x26, 0x53, 0x02, 0x0B, 0x3F, 0x25, 0xE1, 0x00, 0x00, 0x00, 0x0D, 0x41, 
            0x9A, 0x9D, 0x49, 0xE1, 0x0F, 0x26, 0x53, 0x02, 0x0B, 0xBF, 0x28, 0xA1
        ]);
        decodeVideo(data, avcC, false);

    } else {  // il_avcc.264
        let avcC = new Uint8Array([ 
            0x01, 0x64, 0x00, 0x0B, 0xFF, 0xE1, 0x00, 0x18, 0x67, 0x64, 
            0x00, 0x0B, 0xAC, 0xD9, 0x42, 0x4D, 0xF8, 0x88, 0x40, 0x00, 
            0x00, 0x03, 0x00, 0x40, 0x00, 0x00, 0x0F, 0x03, 0xC5, 0x0A, 
            0x65, 0x80, 0x01, 0x00, 0x05, 0x68, 0xEB, 0xEC, 0xB2, 0x2C
        ]);
        let data = new Uint8Array([
            0x00, 0x00, 0x00, 0x0A, 0x65, 0x9E, 0x10, 0x03, 0x83, 0x5F, 0x00, 
            0x00, 0xBC, 0x80, 0x00, 0x00, 0x00, 0x08, 0x41, 0x9A, 0x21, 0x6C, 
            0x41, 0x97, 0x2E, 0xA0
        ]);
        decodeVideo(data, avcC, true);
    }

}


self.onmessage = function(e) {
    console.log(e.data);
    playVideo(e.data);
}